#!/usr/bin/env ruby

require 'date'
require 'net/http'
require 'nokogiri'
require 'optparse'

# stores top-level wx info and metadata
module WxInfo
  attr_accessor :text, :station, :timestamp
  alias format text
  alias to_s text
end

# surface meteorological observation
class Metar
  include WxInfo

  attr_accessor :category

  def initialize(opts = {})
    @text = opts[:text]
    @station = opts[:station]
    @timestamp = opts[:timestamp]
    @category = opts[:category]
  end
end

# meteorological forecast
class Taf
  include WxInfo

  attr_accessor :from, :to

  def initialize(opts = {})
    @text = opts[:text]
    @station = opts[:station]
    @timestamp = opts[:timestamp]
    @from = opts[:from]
    @to = opts[:to]
  end

  def format
    text.gsub(/ (FM|TEMPO)/, "\n    \\1")
  end
end

def http_get(uri)
  Net::HTTP.start(uri.host, uri.port, use_ssl: uri.scheme == 'https') do |http|
    req = Net::HTTP::Get.new(uri)
    res = http.request(req)

    case res
    when Net::HTTPSuccess then res
    else raise "failed to GET #{uri}"
    end
  end
end

def parse_metars(res)
  metars = []
  doc = Nokogiri::XML(res.body)
  doc.xpath('//METAR').each do |m|
    metars << Metar.new(
      text: m.at_xpath('raw_text').text,
      station: m.at_xpath('station_id').text,
      timestamp: DateTime.parse(m.at_xpath('observation_time').text),
      category: m.at_xpath('flight_category').text
    )
  end
  metars
end

def parse_tafs(res)
  tafs = []
  doc = Nokogiri::XML(res.body)
  doc.xpath('//TAF').each do |t|
    tafs << Taf.new(
      text: t.at_xpath('raw_text').text,
      station: t.at_xpath('station_id').text,
      timestamp: DateTime.parse(t.at_xpath('issue_time').text),
      from: DateTime.parse(t.at_xpath('valid_time_from').text),
      to: DateTime.parse(t.at_xpath('valid_time_to').text)
    )
  end
  tafs
end

def parse_args(args)
  options = {
    hours: 1,
    format: false,
    all: false
  }

  opt_parser = OptionParser.new do |opts|
    opts.banner = "Usage: #{opts.program_name} [options] station..."

    opts.on('-a', '--all',
           'print all results instead of just first') do
      options[:all] = true
    end

    opts.on('-f', '--[no-]format',
           "format output (default: #{options[:format] ? 'y' : 'n'})") do |f|
      options[:format] = f
    end

    opts.on('-tN', '--hours=N',
            "hours before now (default: #{options[:hours]})") do |n|
      options[:hours] = n
    end

    opts.on_tail('-h', '--help', 'Display this message') do
      puts opts
    end
  end

  opt_parser.parse!(args)

  options[:all] = true if options[:hours] > 1
  options
end

def adds_api(params)
  uri = URI('https://aviationweather.gov/adds/dataserver_current/httpparam')
  uri.query = URI.encode_www_form(
    params.merge(
      requestType: 'retrieve',
      format: 'xml'
    )
  )
  http_get(uri)
end

def get_metars(stations, hours_before_now)
  parse_metars(
    adds_api(
      dataSource: 'metars',
      stationString: stations,
      hoursBeforeNow: hours_before_now
    )
  )
end

def get_tafs(stations, hours_before_now)
  parse_tafs(
    adds_api(
      dataSource: 'tafs',
      stationString: stations,
      hoursBeforeNow: hours_before_now
    )
  )
end

opts = parse_args(ARGV)
abort if ARGV.empty?
tafs = get_tafs(ARGV.join(','), opts[:hours])
tafs = [tafs.first] unless opts[:all]
tafs.each do |t|
  puts opts[:format] ? t.format : t.to_s
end
